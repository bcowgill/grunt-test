/*global define */
/**
	@file
	A jsdoc sample use of javascript objects defined with prototype functions.
	Demonstrates modules and creating jsdoc links to specific
	members within the module.
	All symbols in the file are assumed to be members of the
	module unless documented otherwise.
	@see jsdoc on exports {@link http://usejsdoc.org/tags-exports.html}
	@see contains {@link module:JSDocModule/Prototype}
	@see contains class {@link module:JSDocModule/Prototype."JSDocModule/Prototype"}
	@see contains class {@link module:JSDocModule/Prototype.JSDocProto}
*/

'use strict';

define(function() {
	/**
		A module that uses a constructor and prototype functions.
		@module JSDocModule/Prototype
	*/

	/**
		A class defined with prototype functions
		jsdoc will automatically call it
		(require("JSDocModule/Prototype"))
		since it doesn't really have a defined name.
		So we provide better name in the constructor or class setting.
		@see {@link module:JSDocModule/Prototype.'(require("JSDocModule/Prototype"))'}
		@todo ERROR cant figure out how to create a link to this type of class.
		@constructor ProtoBased
		@param {string} subject - The subject to greet.
	*/
	var exports = function(subject) {
		this.subject = subject || 'world';
	};

	/** Say hello to the subject.
		@method sayHello
		@memberof ProtoBased
		@return {string} a hello message
	*/
	exports.prototype.sayHello = function() {
		return 'Hello ' + this.subject;
	};

	/**
		Another class in module which we can link to.
		@see {@link module:JSDocModule/Prototype.JSDocProto}
		@class
	*/
	exports.JSDocProto = function () {};

	return exports;
});